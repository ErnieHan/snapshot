{"version":3,"sources":["components/LoadingStyle.js","components/Loading.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["LoadingStyle","styled","div","_templateObject","Loading","react_default","a","createElement","className","id","React","Component","About","state","isLoading","color","data","componentDidMount","_callee","regenerator_default","wrap","_context","prev","next","setTimeout","_this","handleChange","fetch","then","res","json","result","setState","stop","A","document","getElementById","style","animation","addEventListener","_this2","this","lib_default","name","content","src_components_Loading","map","i","key","title","background","onClick","Index","property","Users","Page404","App","BrowserRouter","basename","process","Link","to","Switch","Route","path","exact","component","Boolean","window","location","hostname","match","rootElement","hasChildNodes","hydrate","src_App_0","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bead4a15.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const LoadingStyle = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 100vh;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 36px;\r\n  background: #3b4a56;\r\n  z-index: 99;\r\n  color: #fbb03b;\r\n  font-weight: bolder;\r\n`;\r\n","import React from \"react\";\r\nimport \"./Loading.css\";\r\nimport { LoadingStyle } from \"./LoadingStyle.js\";\r\n\r\nclass Loading extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"loading\" id=\"loading\">\r\n        <LoadingStyle>Loading</LoadingStyle>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport MetaTags from \"react-meta-tags\";\r\nimport Loading from \"../components/Loading\";\r\n\r\nclass About extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    color: \"pink\",\r\n    data: []\r\n  };\r\n  componentDidMount = async () => {\r\n    setTimeout(this.handleChange, 2000);\r\n    await fetch(\"../data.json\")\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        this.setState({\r\n          data: result\r\n        });\r\n      });\r\n  };\r\n  handleChange = () => {\r\n    if (this.state.isLoading) {\r\n      var A = document.getElementById(\"loading\");\r\n      A.style.animation = \"fadeOut 0.5s forwards\";\r\n      A.addEventListener(\"animationend\", () =>\r\n        this.setState({\r\n          isLoading: false\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MetaTags>\r\n          <title>About | Ernie's Website</title>\r\n          <meta name=\"description\" content=\"AboutPage\" />\r\n        </MetaTags>\r\n        {this.state.isLoading && <Loading />}\r\n        ABOUT\r\n        <div>\r\n          {this.state.data.map((data, i) => (\r\n            <h1 key={i}>{data.title}</h1>\r\n          ))}\r\n        </div>\r\n        <button\r\n          style={{ background: this.state.color }}\r\n          onClick={() =>\r\n            this.setState({\r\n              color: \"lightblue\"\r\n            })\r\n          }\r\n        >\r\n          Change\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport MetaTags from \"react-meta-tags\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport About from \"./pages/About\";\n\nfunction Index() {\n  return (\n    <div className=\"App\">\n      <MetaTags>\n        <title>Home | Ernie's Website</title>\n        <meta\n          name=\"description\"\n          content=\"有沒有出現我有沒有出現我有沒有出現我有沒有出現我\"\n        />\n        <meta property=\"og:title\" content=\"MyApp\" />\n        <meta property=\"og:image\" content=\"path/to/image.jpg\" />\n      </MetaTags>\n      <h1>HELLO EVERYONE!!!</h1>\n    </div>\n  );\n}\n\nfunction Users() {\n  return (\n    <h2>\n      <MetaTags>\n        <title>USER</title>\n        <meta name=\"description\" content=\"USERUSERUSERUSER\" />\n        <meta property=\"og:title\" content=\"MyApp\" />\n        <meta property=\"og:image\" content=\"path/to/image.jpg\" />\n      </MetaTags>\n      Users\n    </h2>\n  );\n}\n\nfunction Page404() {\n  return (\n    <h1>\n      <MetaTags>\n        <title>PAGE404</title>\n        <meta name=\"description\" content=\"PAGE404PAGE404PAGE404\" />\n        <meta property=\"og:title\" content=\"MyApp\" />\n        <meta property=\"og:image\" content=\"path/to/image.jpg\" />\n      </MetaTags>\n      PAGE404\n    </h1>\n  );\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/about/\">About</Link>\n              </li>\n              <li>\n                <Link to=\"/users/\">Users</Link>\n              </li>\n            </ul>\n          </nav>\n          <Switch>\n            {/* {console.log(\"process.env.PUBLIC_URL\", process.env.PUBLIC_URL)} */}\n            <Route path=\"/\" exact component={Index} />\n            <Route path=\"/about/\" component={About} />\n            <Route path=\"/users/\" component={Users} />\n            <Route component={Page404} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n// import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { hydrate, render } from \"react-dom\";\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}